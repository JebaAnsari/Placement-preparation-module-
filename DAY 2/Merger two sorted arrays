PROBLEM 3:
//You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, 
and two integers m and n, representing the number of elements in nums1 and nums2 respectively.
Merge nums1 and nums2 into a single array sorted in non-decreasing order.
The final sorted array should not be returned by the function, but instead be stored inside the array nums1. 
To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, 
and the last n elements are set to 0 and should be ignored. nums2 has a length of n.//

SOLUTION//
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
      int left=m-1;
      int right=0;
      while(left>=0 && right<n){
          if(nums1[left]>nums2[right]){
              swap(nums1[left],nums2[right]);
              left--;
              right++;
          }
          else{
              break;
          }
      }
      sort(nums1.begin(),nums1.begin()+m);
      sort(nums2.begin(),nums2.end());

      for(int i=m; i<m+n; i++){
            nums1[i] = nums2[i-m];
        }
    }
};
